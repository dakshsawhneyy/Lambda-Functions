import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET || 'ipageum';     // Same Secret as in login fxn

// Generate Policy Function
const generatePolicy = (principalId, effect, resource, context) => {
    const policy = {
        principalId: principalId,
        policyDocument: {
            Version: '2012-10-17',
            Statement: [{
                Action: 'execute-api:Invoke',
                Effect: effect,
                Resource: resource,
            }],
        },
    }
    if(context) {
        policy.context = context;
    }
    return policy;
}

const handler = async(event) => {
    const token = event.authorizationToken;
    if(!token || !token.startsWith('Bearer ')){
        throw new Error('Unauthorized'); // Returns a 401 Unauthorized
    }

    try {
        console.log('Token', token)
        const tokenValue = token.split(' ')[1]

        const decoded = jwt.verify(tokenValue, JWT_SECRET);

        console.log('Sending user ID: ', decoded.sub)

        // If it is valid, send userID
        return generatePolicy(decoded.sub, 'Allow', event.methodArn, {
            userId: decoded.sub
        })

    } catch (error) {
        console.log('Error Occurred', error.message)
        throw new Error('Unauthorized')
    }
} 
